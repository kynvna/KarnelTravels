﻿@{
    ViewData["Title"] = "News";
    Layout = "~/Views/Shared/_UserLayout.cshtml";
}
@model KarnelTravels.Models.NewsViewModel
<!-- Search Start -->
<div class="container-fluid bg-primary mb-5 wow fadeIn" data-wow-delay="0.1s" style="padding: 35px;">
    <div class="container">
        <div class="row g-2">
            <div class="col-md-8">
                <div class="row g-2">
                    <div class="col-md-6">
                        <input type="text" id="searchInput" class="form-control border-0 py-3" placeholder="Please enter the keyword you want to filter out the news - Ex: Plane,...">
                    </div>
                    <div class="col-md-6">
                        <select id="spotsSelect" class="form-select border-0 py-3">
                            <option value="" selected>--- Select region to filter news ---</option>
                            <!-- This will be populated dynamically with the spot names and IDs -->
                        </select>
                    </div>
                </div>
            </div>
            <div class="col-md-2">
                <button id="searchButton" class="btn btn-dark border-0 w-100 py-3">Find</button>
            </div>
            <div class="col-md-2">
                <span><a class="btn btn-warning border-0 w-100 py-3" asp-controller="Home" asp-action="NewsView">Clear filter</a></span>
            </div>
        </div>
    </div>
</div>
<!-- Search End -->
<!-- Property List Start -->
<div class="container-xxl py-5">
    <div class="container">
        <div class="row g-0 gx-5 align-items-end">
            <div class="col-lg-6">
                <div class="text-start mx-auto mb-5 wow slideInLeft" data-wow-delay="0.1s">
                    <h1 class="mb-3">News</h1>
                    <p>List of news in the website - Feel free to use the search bar for filtering the news you need</p>
                </div>
            </div>
            <div class="col-lg-6 text-start text-lg-end wow slideInRight" data-wow-delay="0.1s">
                <ul class="nav nav-pills d-inline-flex justify-content-end mb-5">
                    <li class="nav-item me-2">
                        <a class="btn btn-outline-danger @(ViewBag.SelectedTab == "HotNews" ? "active" : "")" asp-action="NewsView" asp-route-filterType="HotNews">Hot</a>
                    </li>
                    <li class="nav-item me-2">
                        <a class="btn btn-outline-primary @(ViewBag.SelectedTab == "PackageTours" ? "active" : "")" asp-action="NewsView" asp-route-filterType="Tour_Package">Tours</a>
                    </li>
                    <li class="nav-item me-2">
                        <a class="btn btn-outline-primary @(ViewBag.SelectedTab == "HotelRestaurant" ? "active" : "")" asp-action="NewsView" asp-route-filterType="Hotel_Restaurant">Hotel & Restaurant</a>
                    </li>
                    <li class="nav-item me-2">
                        <a class="btn btn-outline-primary @(ViewBag.SelectedTab == "Transportation" ? "active" : "")" asp-action="NewsView" asp-route-filterType="Travel">Transportation</a>
                    </li>
                    <li class="nav-item me-2">
                        <a class="btn btn-outline-primary @(ViewBag.SelectedTab == "TouristPlace" ? "active" : "")" asp-action="NewsView" asp-route-filterType="Tourist_Place">Place</a>
                    </li>
                </ul>

            </div>
        </div>

        <div class="tab-content">
            <!-- Assume that Model.News contains the filtered news items for the current page -->
            <div id="tab-content-news" class="tab-pane fade show p-0 active">
                <div class="row g-4">
                    @foreach (var item in Model.News)
                    {
                        <div class="col-lg-4 col-md-6 wow fadeInUp" data-wow-delay="0.1s">
                            <div class="property-item rounded overflow-hidden">
                                <div class="position-relative overflow-hidden">
                                    <a href="@Url.Action("NewsDetail", "Home", new { id = item.NewsItem.NewsId })" class="text-decoration-none">
                                        <img src="@($"/img/{item.NewsItem.NewsObject}/{item.ImageUrls.FirstOrDefault()?.Url}")" alt="Description" class="img-fluid" style="width: 100%; height: auto;">
                                    </a>
                                    <div class="bg-success rounded text-white position-absolute start-0 top-0 m-4 py-1 px-3">@item.NewsItem.Status</div>
                                    <div class="bg-white rounded-top text-primary position-absolute start-0 bottom-0 mx-4 pt-1 px-3">NEWSHEAD</div>
                                </div>
                                <div class="p-4 pb-0">
                                    <a href="@Url.Action("NewsDetail", "Home", new { id = item.NewsItem.NewsId })" class="text-decoration-none">
                                        <p class="d-block h5 mb-2">@item.NewsItem.Description</p>
                                    </a>
                                    
                                </div>
                                <div class="d-flex border-top">
                                    <small class="flex-fill text-center border-end py-2"><i class="fa fa-calendar text-primary me-2"></i><strong>Start:</strong> @item.NewsItem.Date</small>
                                </div>
                            </div>
                        </div>
                        
                    }
                </div>

                <br/>
                <!-- Pagination Controls -->
                <nav aria-label="Page navigation example">
                    <ul class="pagination justify-content-center">
                        @if (Model.CurrentPage > 1)
                        {
                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("NewsView", new { page = Model.CurrentPage - 1, pageSize = Model.PageSize })" aria-label="Previous">
                                    <span aria-hidden="true">&laquo;</span>
                                </a>
                            </li>
                        }
                        @for (int i = 1; i <= Model.TotalPages; i++)
                        {
                            <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                <a class="page-link" href="@Url.Action("NewsView", new { page = i, pageSize = Model.PageSize })">@i</a>
                            </li>
                        }
                        @if (Model.CurrentPage < Model.TotalPages)
                        {
                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("NewsView", new { page = Model.CurrentPage + 1, pageSize = Model.PageSize })" aria-label="Next">
                                    <span aria-hidden="true">&raquo;</span>
                                </a>
                            </li>
                        }
                    </ul>
                </nav>
            </div>
        </div>
    </div>
</div>
<!-- Property List End -->
<script>
    document.getElementById("searchButton").addEventListener("click", function () {
        // Retrieve values from input and selects
        const searchText = document.getElementById("searchInput").value;
        // const locationId = document.getElementById("locationSelect").value;
        const spotsId = document.getElementById("spotsSelect").value;

        // Construct data object for the AJAX request
        const data = {
            searchText: searchText,
            // locationId: locationId ? parseInt(locationId) : null,
            spotsId: spotsId ? parseInt(spotsId) : null
        };

        // Perform an AJAX request using jQuery's $.ajax method
        $.ajax({
            url: '/Home/SearchNews', // Adjust this URL to match your route
            method: 'POST',
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            data: $.param(data), // Convert the object to a URL-encoded string for POST
            success: function (response) {
                // Replace only the #tab-content-news section with the partial view response
                document.getElementById("tab-content-news").innerHTML = response;
            },
            error: function (xhr, status, error) {
                console.error("Search request failed:", status, error);
                document.getElementById("tab-content-news").innerHTML = "<p>An error occurred while searching for news. Please try again later.</p>";
            }
        });
    });


    // Execute this when the DOM has fully loaded
    document.addEventListener("DOMContentLoaded", function () {
        // Fetch the list of spots via an AJAX GET request
        $.ajax({
            url: '/Home/GetAllSpots', // Adjust this URL to match your controller action
            method: 'GET',
            success: function (data) {
                // Log data to understand its structure
                console.log("Fetched spots data:", data);

                // Verify data is an array of objects and populate the spots dropdown dynamically
                if (Array.isArray(data)) {
                    const spotsSelect = document.getElementById("spotsSelect");
                    console.log("Spots select element:", spotsSelect);

                    // Clear existing options and add the default option
                    spotsSelect.innerHTML = '<option value="" selected>Search by spots</option>';

                    // Add new options from the fetched spots data
                    data.forEach(function (spot) {
                        console.log("Creating option for spot:", spot);
                        const option = document.createElement("option");
                        option.value = spot.id; // Adjust property name to match your data
                        option.textContent = spot.name; // Ensure this matches the JSON data properties
                        spotsSelect.appendChild(option);
                    });
                } else {
                    console.error("Unexpected data format:", data);
                }
            },
            error: function (xhr, status, error) {
                console.error("Error fetching spots:", error);
            }
        });
    });



</script>