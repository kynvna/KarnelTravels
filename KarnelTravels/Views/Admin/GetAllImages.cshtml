@model IEnumerable<KarnelTravels.Models.TblImageUrl>

@{
    ViewData["Title"] = "GetAllImages";
}
<!-- Add CSRF Token Globally -->
<form>
    @Html.AntiForgeryToken()
</form>
<input name="__RequestVerificationToken" type="hidden" value="your-generated-csrf-token-value" />
<h1>GetAllImages</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>Image</th>
            <th>Description</th>
            <th>Image Name</th>
            <th>Category</th>
            <th>ObjectName</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    <img src="/img/@item.UrlObject/@item.Url" alt="No image" style="width: 50px; height: 50px;">
                </td>
                <td contenteditable="true" onblur="updateDescription(@item.Id, this.innerText)">
                    @item.Description
                </td>
                <td>@Html.DisplayFor(modelItem => item.Url)</td>
                <td>@Html.DisplayFor(modelItem => item.UrlObject)</td>
                <td>@Html.DisplayFor(modelItem => item.ObjectName)</td>
                <td>

                    <a href="javascript:void(0);" onclick="confirmDelete(@item.Id)">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>

<script>
    function updateDescription(id, newDescription) {
        var csrfTokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
        if (!csrfTokenElement) {
            console.error("CSRF token input not found.");
            return;
        }
        console.log("Updating description for ID:", id, "to:", newDescription);

        // Check if CSRF token exists
        var csrfTokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
        if (!csrfTokenElement) {
            console.error("CSRF token input not found.");
            return;
        }

        // Check if `id` is a valid value
        if (id == null || typeof id === "undefined") {
            console.error("Invalid ID value:", id);
            return;
        }

        // Ensure a valid description is provided
        if (!newDescription || newDescription.trim() === "") {
            console.error("Invalid or empty description:", newDescription);
            return;
        }

        // Send an AJAX request to update the description
        fetch('/Admin/UpdateImageDescription', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify({ id: id, description: newDescription })
        }).then(response => {
            if (response.ok) {
                console.log('Description updated successfully');
            } else {
                console.error('Error updating description');
            }
        }).catch(error => {
            console.error('Error updating description:', error);
        });
    }
    function confirmDelete(id) {
        if (confirm("Are you sure you want to delete this image?")) {
            window.location.href = '/Admin/DeleteImage/' + id;
        }
    }

</script>
